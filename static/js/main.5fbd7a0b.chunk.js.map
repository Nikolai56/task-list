{"version":3,"sources":["initialData.js","task.jsx","column.jsx","index.js"],"names":["initialData","tasks","task-1","id","content","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragging","Task","_this$props","this","isDragDisabled","index","task","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","React","PureComponent","column_templateObject","Title","h3","_templateObject2","TaskList","_templateObject3","isDraggingOver","Column","_this","column_Container","column","droppableId","droppableProps","map","task_Task","key","placeholder","src_templateObject","App","state","onDragEnd","result","_objectSpread3","console","log","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","objectSpread","finishTaskIds","newFinish","newState","defineProperty","setState","newtaskIds","newColumn","_this2","src_Container","columnOrderId","taskId","column_Column","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5fbd7a0b.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        'task-1': {id: 'task-1', content: 'content-1'},\n        'task-2': {id: 'task-2', content: 'content-2'},\n        'task-3': {id: 'task-3', content: 'content-3'},\n        'task-4': {id: 'task-4', content: 'content-4'},\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'Todo',\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'In Progress',\n            taskIds: [],\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: [],\n        },\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n  background-color: ${props => props.isDragging ? 'lightgreen' : 'white'};\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n`;\n\nexport default class Task extends React.PureComponent {\n    render() {\n        const { isDragDisabled, index, task } = this.props;\n\n        return (\n            <Draggable\n                draggableId={task.id}\n                index={index}\n                isDragDisabled={isDragDisabled}\n            >\n                {(provided, snapshot) => (\n                        <Container\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            isDragging={snapshot.isDragging}\n                        >\n                            {task.content}\n                        </Container>\n                    )}\n            </Draggable>\n        );\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable } from 'react-beautiful-dnd';\nimport Task from './task';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  width: 220px;\n`;\nconst Title = styled.h3`\n  padding: 8px;\n`;\nconst TaskList = styled.div`\n  background-color: ${props => props.isDraggingOver ? 'skyblue' : 'white'};\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nexport default class Column extends React.PureComponent {\n    render() {\n        return (\n          <Container>\n              <Title>{this.props.column.title}</Title>\n              <Droppable droppableId={this.props.column.id}>\n                  {(provided, snapshot) => (\n                      <TaskList\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                          isDraggingOver={snapshot.isDraggingOver}\n                      >\n                          {this.props.tasks.map((task, index) => (\n                              <Task\n                                  key={task.id}\n                                  task={task}\n                                  index={index}\n                              />\n                          ))}\n                          {provided.placeholder}\n                      </TaskList>\n                  )}\n              </Droppable>\n          </Container>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initialData';\nimport Column from './column';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass App extends React.PureComponent {\n    state = initialData;\n\n    onDragEnd = result => {\n        console.log(result);\n        const { destination, source, draggableId } = result;\n\n        if (!destination) { return; }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) { return; }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if (start === finish) {\n            const newtaskIds = Array.from(start.taskIds);\n            newtaskIds.splice(source.index, 1);\n            newtaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newtaskIds,\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        this.setState(newState);\n\n    };\n\n    render() {\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <Container>\n                    {this.state.columnOrder.map(columnOrderId => {\n                        const column = this.state.columns[columnOrderId];\n                        console.log('column', column);\n                        const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                        console.log('tasks', tasks);\n\n                        return <Column\n                            key={columnOrderId}\n                            column={column}\n                            tasks={tasks}\n                        />;\n                    })}\n                </Container>\n            </DragDropContext>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}