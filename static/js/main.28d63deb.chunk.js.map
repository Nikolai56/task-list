{"version":3,"sources":["icons/drag.svg","initialData.js","task.jsx","column.jsx","index.js"],"names":["module","exports","__webpack_require__","p","initialData","tasks","task-1","id","content","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragging","Title","span","_templateObject2","Task","_this$props","this","isDragDisabled","index","task","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","type","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","src","dragIcon","alt","React","PureComponent","column_templateObject","Header","column_templateObject2","h3","_templateObject3","TaskList","_templateObject4","isDraggingOver","Column","column","column_Container","column_Title","droppableId","droppableProps","map","task_Task","key","placeholder","src_templateObject","App","state","onDragEnd","result","_objectSpread3","console","log","destination","source","start","_this","finish","startTaskIds","Array","from","splice","newStart","objectSpread","finishTaskIds","newFinish","newState","defineProperty","setState","newtaskIds","newColumn","newColumnOrder","_this2","direction","src_Container","columnOrderId","taskId","column_Column","ReactDOM","render","src_App","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOC2BzBC,EA3BK,CAChBC,MAAO,CACHC,SAAU,CAACC,GAAI,SAAUC,QAAS,aAClCC,SAAU,CAACF,GAAI,SAAUC,QAAS,aAClCE,SAAU,CAACH,GAAI,SAAUC,QAAS,aAClCG,SAAU,CAACJ,GAAI,SAAUC,QAAS,cAEtCI,QAAS,CACLC,WAAY,CACRN,GAAI,WACJO,MAAO,OACPC,QAAS,CAAC,SAAU,SAAU,SAAU,WAE5CC,WAAY,CACRT,GAAI,WACJO,MAAO,cACPC,QAAS,IAEbE,WAAY,CACRV,GAAI,WACJO,MAAO,OACPC,QAAS,KAGjBG,YAAa,CAAC,WAAY,WAAY,ocCnB1C,IAAMC,EAAYC,IAAOC,IAAVC,IACO,SAAAC,GAAK,OAAIA,EAAMC,WAAa,aAAe,UAS3DC,EAAQL,IAAOM,KAAVC,KAOUC,mLACR,IAAAC,EACmCC,KAAKP,MAArCQ,EADHF,EACGE,eAAgBC,EADnBH,EACmBG,MAAOC,EAD1BJ,EAC0BI,KAE/B,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,YAAaL,EAAK1B,GAClByB,MAAOA,EACPD,eAAgBA,EAChBQ,KAAK,QAEJ,SAACC,EAAUC,GAAX,OACOP,EAAAC,EAAAC,cAACjB,EAADuB,OAAAC,OAAA,GACQH,EAASI,eACTJ,EAASK,gBAFjB,CAGIC,IAAKN,EAASO,SACdvB,WAAYiB,EAASjB,aAErBU,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAUC,IAAI,eACxBhB,EAAAC,EAAAC,cAACX,EAAD,KAAQQ,EAAKzB,mBAnBP2C,IAAMC,yxBChBxC,IAAMjC,EAAYC,IAAOC,IAAVgC,KAUTC,EAASlC,IAAOC,IAAVkC,KAMN9B,EAAQL,IAAOoC,GAAVC,KAMLC,EAAWtC,IAAOC,IAAVsC,IACQ,SAAApC,GAAK,OAAIA,EAAMqC,eAAiB,UAAY,UAO7CC,mLACR,IAAAhC,EAC4CC,KAAKP,MAA9CQ,EADHF,EACGE,eAAgB1B,EADnBwB,EACmBxB,MAAOyD,EAD1BjC,EAC0BiC,OAAQ9B,EADlCH,EACkCG,MAEvC,OACIE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,YAAawB,EAAOvD,GACpByB,MAAOA,EACPD,eAAgBA,EAChBQ,KAAK,UAEJ,SAACC,EAAUC,GAAX,OACGP,EAAAC,EAAAC,cAAC2B,EAADrB,OAAAC,OAAA,GACQH,EAASI,eADjB,CAEIE,IAAKN,EAASO,SACdvB,WAAYiB,EAASjB,aAErBU,EAAAC,EAAAC,cAACkB,EAAWd,EAASK,gBACjBX,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAUC,IAAI,eACxBhB,EAAAC,EAAAC,cAAC4B,EAAD,KAASF,EAAOhD,QAEpBoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAW4B,YAAaH,EAAOvD,GAAIgC,KAAK,QACnC,SAACC,EAAUC,GAAX,OACGP,EAAAC,EAAAC,cAACsB,EAADhB,OAAAC,OAAA,GACQH,EAAS0B,eADjB,CAEIpB,IAAKN,EAASO,SACda,eAAgBnB,EAASmB,iBAExBvD,EAAM8D,IAAI,SAAClC,EAAMD,GAAP,OACPE,EAAAC,EAAAC,cAACgC,EAAD,CACIC,IAAKpC,EAAK1B,GACV0B,KAAMA,EACND,MAAOA,MAGdQ,EAAS8B,yBAnCVnB,IAAMC,wGC5B1C,IAAMjC,EAAYC,IAAOC,IAAVkD,KAITC,6MACFC,MAAQrE,IAERsE,UAAY,SAAAC,GAAU,IAAAC,EAClBC,QAAQC,IAAIH,GADM,IAEVI,EAA2CJ,EAA3CI,YAAaC,EAA8BL,EAA9BK,OAAQ1C,EAAsBqC,EAAtBrC,YAAaC,EAASoC,EAATpC,KAE1C,GAAKwC,IAGDA,EAAYd,cAAgBe,EAAOf,aACnCc,EAAY/C,QAAUgD,EAAOhD,OAGjC,GAAa,WAATO,EAAJ,CAcA,IAAM0C,EAAQC,EAAKT,MAAM7D,QAAQoE,EAAOf,aAClCkB,EAASD,EAAKT,MAAM7D,QAAQmE,EAAYd,aAE9C,GAAIgB,IAAUE,EAAd,CAsBA,IAAMC,EAAeC,MAAMC,KAAKL,EAAMlE,SACtCqE,EAAaG,OAAOP,EAAOhD,MAAO,GAClC,IAAMwD,EAAQ9C,OAAA+C,EAAA,EAAA/C,CAAA,GACPuC,EADO,CAEVlE,QAASqE,IAGPM,EAAgBL,MAAMC,KAAKH,EAAOpE,SACxC2E,EAAcH,OAAOR,EAAY/C,MAAO,EAAGM,GAC3C,IAAMqD,EAASjD,OAAA+C,EAAA,EAAA/C,CAAA,GACRyC,EADQ,CAEXpE,QAAS2E,IAGPE,EAAQlD,OAAA+C,EAAA,EAAA/C,CAAA,GACPwC,EAAKT,MADE,CAEV7D,QAAQ8B,OAAA+C,EAAA,EAAA/C,CAAA,GACDwC,EAAKT,MAAM7D,SADXgE,EAAA,GAAAlC,OAAAmD,EAAA,EAAAnD,CAAAkC,EAEFY,EAASjF,GAAKiF,GAFZ9C,OAAAmD,EAAA,EAAAnD,CAAAkC,EAGFe,EAAUpF,GAAKoF,GAHbf,MAOXM,EAAKY,SAASF,OA7Cd,CACI,IAAMG,EAAaV,MAAMC,KAAKL,EAAMlE,SACpCgF,EAAWR,OAAOP,EAAOhD,MAAO,GAChC+D,EAAWR,OAAOR,EAAY/C,MAAO,EAAGM,GAExC,IAAM0D,EAAStD,OAAA+C,EAAA,EAAA/C,CAAA,GACRuC,EADQ,CAEXlE,QAASgF,IAGPH,EAAQlD,OAAA+C,EAAA,EAAA/C,CAAA,GACPwC,EAAKT,MADE,CAEV7D,QAAQ8B,OAAA+C,EAAA,EAAA/C,CAAA,GACDwC,EAAKT,MAAM7D,QADX8B,OAAAmD,EAAA,EAAAnD,CAAA,GAEFsD,EAAUzF,GAAKyF,MAIxBd,EAAKY,SAASF,QAnClB,CACI,IAAMK,EAAiBZ,MAAMC,KAAKJ,EAAKT,MAAMvD,aAC7C+E,EAAeV,OAAOP,EAAOhD,MAAO,GACpCiE,EAAeV,OAAOR,EAAY/C,MAAO,EAAGM,GAE5C,IAAMsD,EAAQlD,OAAA+C,EAAA,EAAA/C,CAAA,GACPwC,EAAKT,MADE,CAEVvD,YAAa+E,IAGjBf,EAAKY,SAASF,6EAwDb,IAAAM,EAAApE,KACL,OACII,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIqC,UAAW5C,KAAK4C,WAEhBxC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACI4B,YAAY,cACZkC,UAAU,aACV5D,KAAK,UAEJ,SAACC,EAAUC,GAAX,OACGP,EAAAC,EAAAC,cAACgE,EAAD1D,OAAAC,OAAA,GACQH,EAAS0B,eADjB,CAEIpB,IAAKN,EAASO,SACda,eAAgBnB,EAASmB,iBAExBsC,EAAKzB,MAAMvD,YAAYiD,IAAI,SAACkC,EAAerE,GACxC,IAAM8B,EAASoC,EAAKzB,MAAM7D,QAAQyF,GAClCxB,QAAQC,IAAI,SAAUhB,GACtB,IAAMzD,EAAQyD,EAAO/C,QAAQoD,IAAI,SAAAmC,GAAM,OAAIJ,EAAKzB,MAAMpE,MAAMiG,KAG5D,OAFAzB,QAAQC,IAAI,QAASzE,GAEd6B,EAAAC,EAAAC,cAACmE,EAAD,CACHlC,IAAKgC,EACLvC,OAAQA,EACRzD,MAAOA,EACP2B,MAAOA,MAGdQ,EAAS8B,uBA7GpBnB,IAAMC,eAsHxBoD,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.28d63deb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drag.0481be8d.svg\";","const initialData = {\n    tasks: {\n        'task-1': {id: 'task-1', content: 'content-1'},\n        'task-2': {id: 'task-2', content: 'content-2'},\n        'task-3': {id: 'task-3', content: 'content-3'},\n        'task-4': {id: 'task-4', content: 'content-4'},\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'Todo',\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'In Progress',\n            taskIds: [],\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: [],\n        },\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\nimport dragIcon from './icons/drag.svg';\n\nconst Container = styled.div`\n  background-color: ${props => props.isDragging ? 'lightgreen' : 'white'};\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  display: flex;\n  align-items: center;\n  user-select: none;\n`;\nconst Title = styled.span`\n  margin: 0 0 0 4px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport default class Task extends React.PureComponent {\n    render() {\n        const { isDragDisabled, index, task } = this.props;\n\n        return (\n            <Draggable\n                draggableId={task.id}\n                index={index}\n                isDragDisabled={isDragDisabled}\n                type=\"task\"\n            >\n                {(provided, snapshot) => (\n                        <Container\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            isDragging={snapshot.isDragging}\n                        >\n                            <img src={dragIcon} alt=\"drag-image\"/>\n                            <Title>{task.content}</Title>\n                        </Container>\n                    )}\n            </Draggable>\n        );\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport Task from './task';\nimport dragIcon from './icons/drag.svg';\n\nconst Container = styled.div`\n  background-color: white;\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  width: 220px;\n  user-select: none;\n`;\nconst Header = styled.div`\n  background-color: aliceblue;\n  display: flex;\n  align-items: center;\n  padding: 8px;\n`;\nconst Title = styled.h3`\n  margin: 0 0 0 4px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nconst TaskList = styled.div`\n  background-color: ${props => props.isDraggingOver ? 'skyblue' : 'white'};\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nexport default class Column extends React.PureComponent {\n    render() {\n        const { isDragDisabled, tasks, column, index } = this.props;\n\n        return (\n            <Draggable\n                draggableId={column.id}\n                index={index}\n                isDragDisabled={isDragDisabled}\n                type=\"column\"\n            >\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        <Header {...provided.dragHandleProps}>\n                            <img src={dragIcon} alt=\"drag-image\"/>\n                            <Title >{column.title}</Title>\n                        </Header>\n                        <Droppable droppableId={column.id} type=\"task\">\n                            {(provided, snapshot) => (\n                                <TaskList\n                                    {...provided.droppableProps}\n                                    ref={provided.innerRef}\n                                    isDraggingOver={snapshot.isDraggingOver}\n                                >\n                                    {tasks.map((task, index) => (\n                                        <Task\n                                            key={task.id}\n                                            task={task}\n                                            index={index}\n                                        />\n                                    ))}\n                                    {provided.placeholder}\n                                </TaskList>\n                            )}\n                        </Droppable>\n                    </Container>\n                )}\n            </Draggable>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initialData';\nimport Column from './column';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass App extends React.PureComponent {\n    state = initialData;\n\n    onDragEnd = result => {\n        console.log(result);\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) { return; }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) { return; }\n\n        if (type === 'column') {\n            const newColumnOrder = Array.from(this.state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n\n            const newState = {\n                ...this.state,\n                columnOrder: newColumnOrder,\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if (start === finish) {\n            const newtaskIds = Array.from(start.taskIds);\n            newtaskIds.splice(source.index, 1);\n            newtaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newtaskIds,\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        this.setState(newState);\n\n    };\n\n    render() {\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <Droppable\n                    droppableId=\"all-columns\"\n                    direction=\"horizontal\"\n                    type=\"column\"\n                >\n                    {(provided, snapshot) => (\n                        <Container\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            isDraggingOver={snapshot.isDraggingOver}\n                        >\n                            {this.state.columnOrder.map((columnOrderId, index) => {\n                                const column = this.state.columns[columnOrderId];\n                                console.log('column', column);\n                                const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                                console.log('tasks', tasks);\n\n                                return <Column\n                                    key={columnOrderId}\n                                    column={column}\n                                    tasks={tasks}\n                                    index={index}\n                                />;\n                            })}\n                            {provided.placeholder}\n                        </Container>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}